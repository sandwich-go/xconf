// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package xcmd

import "github.com/sandwich-go/xconf"

// config should use NewConfig to initialize it
type config struct {
	// annotation@Short(comment="少于一行的操作说明")
	Short string
	// annotation@Usage(comment="详细说明")
	Usage string
	// annotation@XConfOption(comment="Parser依赖的XConf配置")
	XConfOption []xconf.Option
	// annotation@Parser(comment="配置解析")
	Parser MiddlewareFunc
	// annotation@Executer(comment="当未配置Parser时触发该默认逻辑")
	OnExecuterLost         Executer
	SuggestionsMinDistance int
}

// NewConfig new config
func NewConfig(opts ...ConfigOption) *config {
	cc := newDefaultConfig()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogConfig != nil {
		watchDogConfig(cc)
	}
	return cc
}

// ApplyOption apply mutiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *config) ApplyOption(opts ...ConfigOption) []ConfigOption {
	var previous []ConfigOption
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// ConfigOption option func
type ConfigOption func(cc *config) ConfigOption

// WithShort 少于一行的操作说明
func WithShort(v string) ConfigOption {
	return func(cc *config) ConfigOption {
		previous := cc.Short
		cc.Short = v
		return WithShort(previous)
	}
}

// WithUsage 详细说明
func WithUsage(v string) ConfigOption {
	return func(cc *config) ConfigOption {
		previous := cc.Usage
		cc.Usage = v
		return WithUsage(previous)
	}
}

// WithXConfOption Parser依赖的XConf配置
func WithXConfOption(v ...xconf.Option) ConfigOption {
	return func(cc *config) ConfigOption {
		previous := cc.XConfOption
		cc.XConfOption = v
		return WithXConfOption(previous...)
	}
}

// WithXConfOption Parser依赖的XConf配置 append
func WithXConfOptionAppend(v ...xconf.Option) ConfigOption {
	return func(cc *config) ConfigOption {
		previous := cc.XConfOption
		cc.XConfOption = append(cc.XConfOption, v...)
		return WithXConfOption(previous...)
	}
}

// WithParser 配置解析
func WithParser(v MiddlewareFunc) ConfigOption {
	return func(cc *config) ConfigOption {
		previous := cc.Parser
		cc.Parser = v
		return WithParser(previous)
	}
}

// WithOnExecuterLost option func for filed OnExecuterLost
func WithOnExecuterLost(v Executer) ConfigOption {
	return func(cc *config) ConfigOption {
		previous := cc.OnExecuterLost
		cc.OnExecuterLost = v
		return WithOnExecuterLost(previous)
	}
}

// WithSuggestionsMinDistance option func for filed SuggestionsMinDistance
func WithSuggestionsMinDistance(v int) ConfigOption {
	return func(cc *config) ConfigOption {
		previous := cc.SuggestionsMinDistance
		cc.SuggestionsMinDistance = v
		return WithSuggestionsMinDistance(previous)
	}
}

// InstallConfigWatchDog the installed func will called when NewConfig  called
func InstallConfigWatchDog(dog func(cc *config)) { watchDogConfig = dog }

// watchDogConfig global watch dog
var watchDogConfig func(cc *config)

// newDefaultConfig new default config
func newDefaultConfig() *config {
	cc := &config{}

	for _, opt := range [...]ConfigOption{
		WithShort(""),
		WithUsage(""),
		WithXConfOption(defaultXConfOption...),
		WithParser(ParserXConf),
		WithOnExecuterLost(DefaultExecuter),
		WithSuggestionsMinDistance(2),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
func (cc *config) GetShort() string               { return cc.Short }
func (cc *config) GetUsage() string               { return cc.Usage }
func (cc *config) GetXConfOption() []xconf.Option { return cc.XConfOption }
func (cc *config) GetParser() MiddlewareFunc      { return cc.Parser }
func (cc *config) GetOnExecuterLost() Executer    { return cc.OnExecuterLost }
func (cc *config) GetSuggestionsMinDistance() int { return cc.SuggestionsMinDistance }

// ConfigVisitor visitor interface for config
type ConfigVisitor interface {
	GetShort() string
	GetUsage() string
	GetXConfOption() []xconf.Option
	GetParser() MiddlewareFunc
	GetOnExecuterLost() Executer
	GetSuggestionsMinDistance() int
}

// ConfigInterface visitor + ApplyOption interface for config
type ConfigInterface interface {
	ConfigVisitor
	ApplyOption(...ConfigOption) []ConfigOption
}
