// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package xcmd

import "github.com/sandwich-go/xconf"

// config should use NewConfig to initialize it
type config struct {
	// annotation@Bind(comment="命令绑定的参数结构")
	Bind interface{}
	// annotation@BindFieldPath(comment="命令绑定的参数FieldPath,如空则全部绑定")
	BindFieldPath []string
	// annotation@Synopsis(comment="少于一行的操作说明")
	Synopsis string
	// annotation@Usage(comment="详细说明")
	Usage string
	// annotation@Execute(comment="执行方法")
	Execute     Executer
	XConfOption []xconf.Option
}

// NewConfig new config
func NewConfig(opts ...ConfigOption) ConfigInterface {
	cc := newDefaultConfig()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogConfig != nil {
		watchDogConfig(cc)
	}
	return cc
}

// ApplyOption apply mutiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *config) ApplyOption(opts ...ConfigOption) []ConfigOption {
	var previous []ConfigOption
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// ConfigOption option func
type ConfigOption func(cc *config) ConfigOption

// WithBind 命令绑定的参数结构
func WithBind(v interface{}) ConfigOption {
	return func(cc *config) ConfigOption {
		previous := cc.Bind
		cc.Bind = v
		return WithBind(previous)
	}
}

// WithBindFieldPath 命令绑定的参数FieldPath,如空则全部绑定
func WithBindFieldPath(v ...string) ConfigOption {
	return func(cc *config) ConfigOption {
		previous := cc.BindFieldPath
		cc.BindFieldPath = v
		return WithBindFieldPath(previous...)
	}
}

// WithBindFieldPath 命令绑定的参数FieldPath,如空则全部绑定 append
func WithBindFieldPathAppend(v ...string) ConfigOption {
	return func(cc *config) ConfigOption {
		previous := cc.BindFieldPath
		cc.BindFieldPath = append(cc.BindFieldPath, v...)
		return WithBindFieldPath(previous...)
	}
}

// WithSynopsis 少于一行的操作说明
func WithSynopsis(v string) ConfigOption {
	return func(cc *config) ConfigOption {
		previous := cc.Synopsis
		cc.Synopsis = v
		return WithSynopsis(previous)
	}
}

// WithUsage 详细说明
func WithUsage(v string) ConfigOption {
	return func(cc *config) ConfigOption {
		previous := cc.Usage
		cc.Usage = v
		return WithUsage(previous)
	}
}

// WithExecute 执行方法
func WithExecute(v Executer) ConfigOption {
	return func(cc *config) ConfigOption {
		previous := cc.Execute
		cc.Execute = v
		return WithExecute(previous)
	}
}

// WithXConfOption option func for filed XConfOption
func WithXConfOption(v ...xconf.Option) ConfigOption {
	return func(cc *config) ConfigOption {
		previous := cc.XConfOption
		cc.XConfOption = v
		return WithXConfOption(previous...)
	}
}

// WithXConfOption option func for filed XConfOption append
func WithXConfOptionAppend(v ...xconf.Option) ConfigOption {
	return func(cc *config) ConfigOption {
		previous := cc.XConfOption
		cc.XConfOption = append(cc.XConfOption, v...)
		return WithXConfOption(previous...)
	}
}

// InstallConfigWatchDog the installed func will called when NewConfig  called
func InstallConfigWatchDog(dog func(cc *config)) { watchDogConfig = dog }

// watchDogConfig global watch dog
var watchDogConfig func(cc *config)

// newDefaultConfig new default config
func newDefaultConfig() *config {
	cc := &config{}

	for _, opt := range [...]ConfigOption{
		WithBind(nil),
		WithBindFieldPath(make([]string, 0)...),
		WithSynopsis(""),
		WithUsage(""),
		WithExecute(nil),
		WithXConfOption([]xconf.Option{
			xconf.WithErrorHandling(xconf.ContinueOnError),
			xconf.WithReplaceFlagSetUsage(false),
		}...),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
func (cc *config) GetBind() interface{}           { return cc.Bind }
func (cc *config) GetBindFieldPath() []string     { return cc.BindFieldPath }
func (cc *config) GetSynopsis() string            { return cc.Synopsis }
func (cc *config) GetUsage() string               { return cc.Usage }
func (cc *config) GetExecute() Executer           { return cc.Execute }
func (cc *config) GetXConfOption() []xconf.Option { return cc.XConfOption }

// ConfigVisitor visitor interface for config
type ConfigVisitor interface {
	GetBind() interface{}
	GetBindFieldPath() []string
	GetSynopsis() string
	GetUsage() string
	GetExecute() Executer
	GetXConfOption() []xconf.Option
}

// ConfigInterface visitor + ApplyOption interface for config
type ConfigInterface interface {
	ConfigVisitor
	ApplyOption(...ConfigOption) []ConfigOption
}
