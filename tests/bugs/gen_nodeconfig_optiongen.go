// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package tests

import (
	"sync/atomic"
	"unsafe"
)

// NodeConfig should use NewNodeConfig to initialize it
type NodeConfig struct {
	Master   bool   `xconf:"master" usage:"是否为master节点，如果是，则为true，所有的节点，只有一个master节点"`
	Host     string `xconf:"host" usage:"mysql节点host"`
	Port     int    `xconf:"port" usage:"mysql节点port"`
	User     string `xconf:"user" usage:"mysql节点user"`
	Password string `xconf:"password" usage:"mysql节点password"`
}

// NewNodeConfig new NodeConfig
func NewNodeConfig(opts ...NodeConfigOption) *NodeConfig {
	cc := newDefaultNodeConfig()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogNodeConfig != nil {
		watchDogNodeConfig(cc)
	}
	return cc
}

// ApplyOption apply mutiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *NodeConfig) ApplyOption(opts ...NodeConfigOption) []NodeConfigOption {
	var previous []NodeConfigOption
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// NodeConfigOption option func
type NodeConfigOption func(cc *NodeConfig) NodeConfigOption

// WithMaster 是否为master节点，如果是，则为true，所有的节点，只有一个master节点
func WithMaster(v bool) NodeConfigOption {
	return func(cc *NodeConfig) NodeConfigOption {
		previous := cc.Master
		cc.Master = v
		return WithMaster(previous)
	}
}

// WithHost mysql节点host
func WithHost(v string) NodeConfigOption {
	return func(cc *NodeConfig) NodeConfigOption {
		previous := cc.Host
		cc.Host = v
		return WithHost(previous)
	}
}

// WithPort mysql节点port
func WithPort(v int) NodeConfigOption {
	return func(cc *NodeConfig) NodeConfigOption {
		previous := cc.Port
		cc.Port = v
		return WithPort(previous)
	}
}

// WithUser mysql节点user
func WithUser(v string) NodeConfigOption {
	return func(cc *NodeConfig) NodeConfigOption {
		previous := cc.User
		cc.User = v
		return WithUser(previous)
	}
}

// WithPassword mysql节点password
func WithPassword(v string) NodeConfigOption {
	return func(cc *NodeConfig) NodeConfigOption {
		previous := cc.Password
		cc.Password = v
		return WithPassword(previous)
	}
}

// InstallNodeConfigWatchDog the installed func will called when NewNodeConfig  called
func InstallNodeConfigWatchDog(dog func(cc *NodeConfig)) { watchDogNodeConfig = dog }

// watchDogNodeConfig global watch dog
var watchDogNodeConfig func(cc *NodeConfig)

// newDefaultNodeConfig new default NodeConfig
func newDefaultNodeConfig() *NodeConfig {
	cc := &NodeConfig{}

	for _, opt := range [...]NodeConfigOption{
		WithMaster(false),
		WithHost("127.0.0.1"),
		WithPort(3306),
		WithUser("root"),
		WithPassword(""),
	} {
		opt(cc)
	}

	return cc
}

// AtomicSetFunc used for XConf
func (cc *NodeConfig) AtomicSetFunc() func(interface{}) { return AtomicNodeConfigSet }

// atomicNodeConfig global *NodeConfig holder
var atomicNodeConfig unsafe.Pointer

// onAtomicNodeConfigSet global call back when  AtomicNodeConfigSet called by XConf.
// use NodeConfigInterface.ApplyOption to modify the updated cc
// if passed in cc not valid, then return false, cc will not set to atomicNodeConfig
var onAtomicNodeConfigSet func(cc NodeConfigInterface) bool

// InstallCallbackOnAtomicNodeConfigSet install callback
func InstallCallbackOnAtomicNodeConfigSet(callback func(cc NodeConfigInterface) bool) {
	onAtomicNodeConfigSet = callback
}

// AtomicNodeConfigSet atomic setter for *NodeConfig
func AtomicNodeConfigSet(update interface{}) {
	cc := update.(*NodeConfig)
	if onAtomicNodeConfigSet != nil && !onAtomicNodeConfigSet(cc) {
		return
	}
	atomic.StorePointer(&atomicNodeConfig, (unsafe.Pointer)(cc))
}

// AtomicNodeConfig return atomic *NodeConfigVisitor
func AtomicNodeConfig() NodeConfigVisitor {
	current := (*NodeConfig)(atomic.LoadPointer(&atomicNodeConfig))
	if current == nil {
		defaultOne := newDefaultNodeConfig()
		if watchDogNodeConfig != nil {
			watchDogNodeConfig(defaultOne)
		}
		atomic.CompareAndSwapPointer(&atomicNodeConfig, nil, (unsafe.Pointer)(defaultOne))
		return (*NodeConfig)(atomic.LoadPointer(&atomicNodeConfig))
	}
	return current
}

// all getter func
func (cc *NodeConfig) GetMaster() bool     { return cc.Master }
func (cc *NodeConfig) GetHost() string     { return cc.Host }
func (cc *NodeConfig) GetPort() int        { return cc.Port }
func (cc *NodeConfig) GetUser() string     { return cc.User }
func (cc *NodeConfig) GetPassword() string { return cc.Password }

// NodeConfigVisitor visitor interface for NodeConfig
type NodeConfigVisitor interface {
	GetMaster() bool
	GetHost() string
	GetPort() int
	GetUser() string
	GetPassword() string
}

// NodeConfigInterface visitor + ApplyOption interface for NodeConfig
type NodeConfigInterface interface {
	NodeConfigVisitor
	ApplyOption(...NodeConfigOption) []NodeConfigOption
}
