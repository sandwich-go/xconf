// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package config

import (
	"sync/atomic"
	"unsafe"
)

// ETCD struct
type ETCD struct {
	Endpoints       []string  `xconf:"endpoints"`
	TimeoutsPointer *Timeouts `xconf:"timeouts_pointer"`
}

// SetOption apply single option
func (cc *ETCD) SetOption(opt ETCDOption) {
	_ = opt(cc)
}

// ApplyOption apply mutiple options
func (cc *ETCD) ApplyOption(opts ...ETCDOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption apply new option and return the old optuon
// sample:
// old := cc.GetSetOption(WithTimeout(time.Second))
// defer cc.SetOption(old)
func (cc *ETCD) GetSetOption(opt ETCDOption) ETCDOption {
	return opt(cc)
}

// ETCDOption option func
type ETCDOption func(cc *ETCD) ETCDOption

// WithETCDEndpoints option func for Endpoints
func WithETCDEndpoints(v ...string) ETCDOption {
	return func(cc *ETCD) ETCDOption {
		previous := cc.Endpoints
		cc.Endpoints = v
		return WithETCDEndpoints(previous...)
	}
}

// WithETCDTimeoutsPointer option func for TimeoutsPointer
func WithETCDTimeoutsPointer(v *Timeouts) ETCDOption {
	return func(cc *ETCD) ETCDOption {
		previous := cc.TimeoutsPointer
		cc.TimeoutsPointer = v
		return WithETCDTimeoutsPointer(previous)
	}
}

// NewETCD(opts... ETCDOption) new ETCD
func NewETCD(opts ...ETCDOption) *ETCD {
	cc := newDefaultETCD()

	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogETCD != nil {
		watchDogETCD(cc)
	}
	return cc
}

// InstallETCDWatchDog the installed func will called when NewETCD(opts... ETCDOption)  called
func InstallETCDWatchDog(dog func(cc *ETCD)) {
	watchDogETCD = dog
}

// watchDogETCD global watch dog
var watchDogETCD func(cc *ETCD)

// newDefaultETCD new default ETCD
func newDefaultETCD() *ETCD {
	cc := &ETCD{}

	for _, opt := range [...]ETCDOption{
		WithETCDEndpoints([]string{"10.0.0.1", "10.0.0.2"}...),
		WithETCDTimeoutsPointer(&Timeouts{}),
	} {
		_ = opt(cc)
	}

	return cc
}

// AtomicSetFunc used for XConf
func (cc *ETCD) AtomicSetFunc() func(interface{}) { return AtomicETCDSet }

// atomicETCD global *ETCD holder
var atomicETCD unsafe.Pointer

// AtomicETCDSet atomic setter for *ETCD
func AtomicETCDSet(update interface{}) {
	atomic.StorePointer(&atomicETCD, (unsafe.Pointer)(update.(*ETCD)))
}

// AtomicETCD return atomic *ETCD visitor
func AtomicETCD() ETCDVisitor {
	current := (*ETCD)(atomic.LoadPointer(&atomicETCD))
	if current == nil {
		atomic.CompareAndSwapPointer(&atomicETCD, nil, (unsafe.Pointer)(newDefaultETCD()))
		return (*ETCD)(atomic.LoadPointer(&atomicETCD))
	}
	return current
}

// all getter func
// GetEndpoints return struct field: Endpoints
func (cc *ETCD) GetEndpoints() []string { return cc.Endpoints }

// GetTimeoutsPointer return struct field: TimeoutsPointer
func (cc *ETCD) GetTimeoutsPointer() *Timeouts { return cc.TimeoutsPointer }

// ETCDVisitor visitor interface for ETCD
type ETCDVisitor interface {
	GetEndpoints() []string
	GetTimeoutsPointer() *Timeouts
}
