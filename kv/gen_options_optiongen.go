// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package kv

import "github.com/sandwich-go/xconf/secconf"

// options struct
type options struct {
	OnWatchError WatchError
	Decoder      secconf.Codec
}

// ApplyOption apply mutiple new option and return the old mutiple optuons
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *options) ApplyOption(opts ...optionsOption) []optionsOption {
	var previous []optionsOption
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// optionsOption option func
type optionsOption func(cc *options) optionsOption

// WithOnWatchError option func for OnWatchError
func WithOnWatchError(v WatchError) optionsOption {
	return func(cc *options) optionsOption {
		previous := cc.OnWatchError
		cc.OnWatchError = v
		return WithOnWatchError(previous)
	}
}

// 允许每一个远端设定独立的加密方式
// WithDecoder option func for Decoder
func WithDecoder(v secconf.Codec) optionsOption {
	return func(cc *options) optionsOption {
		previous := cc.Decoder
		cc.Decoder = v
		return WithDecoder(previous)
	}
}

// Newoptions(opts... optionsOption) new options
func Newoptions(opts ...optionsOption) *options {
	cc := newDefaultoptions()

	for _, opt := range opts {
		opt(cc)
	}
	if watchDogoptions != nil {
		watchDogoptions(cc)
	}
	return cc
}

// InstalloptionsWatchDog the installed func will called when Newoptions(opts... optionsOption)  called
func InstalloptionsWatchDog(dog func(cc *options)) {
	watchDogoptions = dog
}

// watchDogoptions global watch dog
var watchDogoptions func(cc *options)

// newDefaultoptions new default options
func newDefaultoptions() *options {
	cc := &options{}

	for _, opt := range [...]optionsOption{
		WithOnWatchError(nil),
		WithDecoder(nil),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
// GetOnWatchError return struct field: OnWatchError
func (cc *options) GetOnWatchError() WatchError { return cc.OnWatchError }

// GetDecoder return struct field: Decoder
func (cc *options) GetDecoder() secconf.Codec { return cc.Decoder }

// optionsVisitor visitor interface for options
type optionsVisitor interface {
	GetOnWatchError() WatchError
	GetDecoder() secconf.Codec
}

type optionsInterface interface {
	optionsVisitor
	ApplyOption(...optionsOption) []optionsOption
}
