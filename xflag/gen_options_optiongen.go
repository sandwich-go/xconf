// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package xflag

import (
	"flag"
	"log"
	"strings"

	"github.com/sandwich-go/xconf/xflag/vars"
)

// Options struct
type Options struct {
	Name              string
	TagName           string // 使用的tag key,如不设定则使用
	UsageTagName      string
	Flatten           bool // 是否使用扁平模式，不使用.分割
	FlagSet           *flag.FlagSet
	FlagValueProvider vars.FlagValueProvider
	KeyFormat         KeyFormat
	FlagSetIgnore     []string
	LogDebug          LogFunc
	LogWarning        LogFunc
}

// ApplyOption apply mutiple new option and return the old mutiple optuons
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *Options) ApplyOption(opts ...Option) []Option {
	var previous []Option
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// Option option func
type Option func(cc *Options) Option

// WithName option func for Name
func WithName(v string) Option {
	return func(cc *Options) Option {
		previous := cc.Name
		cc.Name = v
		return WithName(previous)
	}
}

// WithTagName option func for TagName
func WithTagName(v string) Option {
	return func(cc *Options) Option {
		previous := cc.TagName
		cc.TagName = v
		return WithTagName(previous)
	}
}

// WithUsageTagName option func for UsageTagName
func WithUsageTagName(v string) Option {
	return func(cc *Options) Option {
		previous := cc.UsageTagName
		cc.UsageTagName = v
		return WithUsageTagName(previous)
	}
}

// WithFlatten option func for Flatten
func WithFlatten(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.Flatten
		cc.Flatten = v
		return WithFlatten(previous)
	}
}

// WithFlagSet option func for FlagSet
func WithFlagSet(v *flag.FlagSet) Option {
	return func(cc *Options) Option {
		previous := cc.FlagSet
		cc.FlagSet = v
		return WithFlagSet(previous)
	}
}

// WithFlagValueProvider option func for FlagValueProvider
func WithFlagValueProvider(v vars.FlagValueProvider) Option {
	return func(cc *Options) Option {
		previous := cc.FlagValueProvider
		cc.FlagValueProvider = v
		return WithFlagValueProvider(previous)
	}
}

// WithKeyFormat option func for KeyFormat
func WithKeyFormat(v KeyFormat) Option {
	return func(cc *Options) Option {
		previous := cc.KeyFormat
		cc.KeyFormat = v
		return WithKeyFormat(previous)
	}
}

// WithFlagSetIgnore option func for FlagSetIgnore
func WithFlagSetIgnore(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.FlagSetIgnore
		cc.FlagSetIgnore = v
		return WithFlagSetIgnore(previous...)
	}
}

// WithLogDebug option func for LogDebug
func WithLogDebug(v LogFunc) Option {
	return func(cc *Options) Option {
		previous := cc.LogDebug
		cc.LogDebug = v
		return WithLogDebug(previous)
	}
}

// WithLogWarning option func for LogWarning
func WithLogWarning(v LogFunc) Option {
	return func(cc *Options) Option {
		previous := cc.LogWarning
		cc.LogWarning = v
		return WithLogWarning(previous)
	}
}

// NewOptions(opts... Option) new Options
func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()

	for _, opt := range opts {
		opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

// InstallOptionsWatchDog the installed func will called when NewOptions(opts... Option)  called
func InstallOptionsWatchDog(dog func(cc *Options)) {
	watchDogOptions = dog
}

// watchDogOptions global watch dog
var watchDogOptions func(cc *Options)

// newDefaultOptions new default Options
func newDefaultOptions() *Options {
	cc := &Options{}

	for _, opt := range [...]Option{
		WithName(""),
		WithTagName("xconf"),
		WithUsageTagName("usage"),
		WithFlatten(false),
		WithFlagSet(flag.NewFlagSet("flagmaker", flag.ContinueOnError)),
		WithFlagValueProvider(vars.DefaultFlagValueProvider),
		WithKeyFormat(func(s string) string { return strings.ToLower(s) }),
		WithFlagSetIgnore(make([]string, 0)...),
		WithLogDebug(func(s string) {
			log.Print("debug:" + s)
		}),
		WithLogWarning(func(s string) {
			log.Print("warning: " + s)
		}),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
// GetName return struct field: Name
func (cc *Options) GetName() string { return cc.Name }

// GetTagName return struct field: TagName
func (cc *Options) GetTagName() string { return cc.TagName }

// GetUsageTagName return struct field: UsageTagName
func (cc *Options) GetUsageTagName() string { return cc.UsageTagName }

// GetFlatten return struct field: Flatten
func (cc *Options) GetFlatten() bool { return cc.Flatten }

// GetFlagSet return struct field: FlagSet
func (cc *Options) GetFlagSet() *flag.FlagSet { return cc.FlagSet }

// GetFlagValueProvider return struct field: FlagValueProvider
func (cc *Options) GetFlagValueProvider() vars.FlagValueProvider { return cc.FlagValueProvider }

// GetKeyFormat return struct field: KeyFormat
func (cc *Options) GetKeyFormat() KeyFormat { return cc.KeyFormat }

// GetFlagSetIgnore return struct field: FlagSetIgnore
func (cc *Options) GetFlagSetIgnore() []string { return cc.FlagSetIgnore }

// GetLogDebug return struct field: LogDebug
func (cc *Options) GetLogDebug() LogFunc { return cc.LogDebug }

// GetLogWarning return struct field: LogWarning
func (cc *Options) GetLogWarning() LogFunc { return cc.LogWarning }

// OptionsVisitor visitor interface for Options
type OptionsVisitor interface {
	GetName() string
	GetTagName() string
	GetUsageTagName() string
	GetFlatten() bool
	GetFlagSet() *flag.FlagSet
	GetFlagValueProvider() vars.FlagValueProvider
	GetKeyFormat() KeyFormat
	GetFlagSetIgnore() []string
	GetLogDebug() LogFunc
	GetLogWarning() LogFunc
}

type OptionsInterface interface {
	OptionsVisitor
	ApplyOption(...Option) []Option
}
