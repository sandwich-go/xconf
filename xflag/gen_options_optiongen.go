// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package xflag

import (
	"flag"
	"log"
	"strings"

	"github.com/sandwich-go/xconf/xflag/vars"
)

type Options struct {
	Name              string
	TagName           string // 使用的tag key,如不设定则使用
	UsageTagName      string
	Flatten           bool // 是否使用扁平模式，不使用.分割
	FlagSet           *flag.FlagSet
	FlagValueProvider vars.FlagValueProvider
	KeyFormat         KeyFormat
	FlagSetIgnore     []string
	LogDebug          LogFunc
	LogWarning        LogFunc
}

func (cc *Options) SetOption(opt Option) {
	_ = opt(cc)
}

func (cc *Options) ApplyOption(opts ...Option) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *Options) GetSetOption(opt Option) Option {
	return opt(cc)
}

type Option func(cc *Options) Option

func WithName(v string) Option {
	return func(cc *Options) Option {
		previous := cc.Name
		cc.Name = v
		return WithName(previous)
	}
}

func WithTagName(v string) Option {
	return func(cc *Options) Option {
		previous := cc.TagName
		cc.TagName = v
		return WithTagName(previous)
	}
}

func WithUsageTagName(v string) Option {
	return func(cc *Options) Option {
		previous := cc.UsageTagName
		cc.UsageTagName = v
		return WithUsageTagName(previous)
	}
}

func WithFlatten(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.Flatten
		cc.Flatten = v
		return WithFlatten(previous)
	}
}

func WithFlagSet(v *flag.FlagSet) Option {
	return func(cc *Options) Option {
		previous := cc.FlagSet
		cc.FlagSet = v
		return WithFlagSet(previous)
	}
}

func WithFlagValueProvider(v vars.FlagValueProvider) Option {
	return func(cc *Options) Option {
		previous := cc.FlagValueProvider
		cc.FlagValueProvider = v
		return WithFlagValueProvider(previous)
	}
}

func WithKeyFormat(v KeyFormat) Option {
	return func(cc *Options) Option {
		previous := cc.KeyFormat
		cc.KeyFormat = v
		return WithKeyFormat(previous)
	}
}

func WithFlagSetIgnore(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.FlagSetIgnore
		cc.FlagSetIgnore = v
		return WithFlagSetIgnore(previous...)
	}
}

func WithLogDebug(v LogFunc) Option {
	return func(cc *Options) Option {
		previous := cc.LogDebug
		cc.LogDebug = v
		return WithLogDebug(previous)
	}
}

func WithLogWarning(v LogFunc) Option {
	return func(cc *Options) Option {
		previous := cc.LogWarning
		cc.LogWarning = v
		return WithLogWarning(previous)
	}
}

func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()

	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

func InstallOptionsWatchDog(dog func(cc *Options)) {
	watchDogOptions = dog
}

var watchDogOptions func(cc *Options)

func newDefaultOptions() *Options {

	cc := &Options{}

	for _, opt := range [...]Option{
		WithName(""),
		WithTagName("xconf"),
		WithUsageTagName("usage"),
		WithFlatten(false),
		WithFlagSet(flag.NewFlagSet("flagmaker", flag.ContinueOnError)),
		WithFlagValueProvider(vars.DefaultFlagValueProvider),
		WithKeyFormat(func(s string) string { return strings.ToLower(s) }),
		WithFlagSetIgnore(make([]string, 0)...),
		WithLogDebug(func(s string) {
			log.Print("debug:" + s)
		}),
		WithLogWarning(func(s string) {
			log.Print("warning: " + s)
		}),
	} {
		_ = opt(cc)
	}

	return cc
}

// all getter func
func (cc *Options) GetName() string                              { return cc.Name }
func (cc *Options) GetTagName() string                           { return cc.TagName }
func (cc *Options) GetUsageTagName() string                      { return cc.UsageTagName }
func (cc *Options) GetFlatten() bool                             { return cc.Flatten }
func (cc *Options) GetFlagSet() *flag.FlagSet                    { return cc.FlagSet }
func (cc *Options) GetFlagValueProvider() vars.FlagValueProvider { return cc.FlagValueProvider }
func (cc *Options) GetKeyFormat() KeyFormat                      { return cc.KeyFormat }
func (cc *Options) GetFlagSetIgnore() []string                   { return cc.FlagSetIgnore }
func (cc *Options) GetLogDebug() LogFunc                         { return cc.LogDebug }
func (cc *Options) GetLogWarning() LogFunc                       { return cc.LogWarning }

// interface for Options
type OptionsVisitor interface {
	GetName() string
	GetTagName() string
	GetUsageTagName() string
	GetFlatten() bool
	GetFlagSet() *flag.FlagSet
	GetFlagValueProvider() vars.FlagValueProvider
	GetKeyFormat() KeyFormat
	GetFlagSetIgnore() []string
	GetLogDebug() LogFunc
	GetLogWarning() LogFunc
}
