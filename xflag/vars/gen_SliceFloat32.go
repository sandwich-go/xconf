// Code generated by gotemplate. DO NOT EDIT.

package vars

import (
	"flag"
	"fmt"
	"reflect"
	"strings"
)

//template type Slice(KType,ParseKeyFunc,SetProviderByFieldType,StringValueDelim)

var typeNameSliceFloat32 = ""

func init() {
	v := []float32{}
	typeNameSliceFloat32 = fmt.Sprintf("[]%s", reflect.TypeOf(v).Elem().Name())
	SetProviderByFieldType(typeNameSliceFloat32, func(valPtr interface{}) flag.Getter {
		return NewSliceFloat32(valPtr.(*[]float32))
	})
}

type SliceFloat32 struct {
	s   *[]float32
	set bool // if there a flag defined via command line, the slice will be cleared first.
}

func NewSliceFloat32(p *[]float32) *SliceFloat32 {
	return &SliceFloat32{
		s:   p,
		set: false,
	}
}

func (s *SliceFloat32) Set(str string) error {
	for _, v := range strings.Split(str, StringValueDelim) {
		got, err := parseFloat32(v)
		if err != nil {
			return err
		}
		if !s.set {
			*s.s = (*s.s)[:0]
			s.set = true
		}
		*s.s = append(*s.s, got)
	}
	return nil
}

func (s *SliceFloat32) Get() interface{} {
	return []float32(*s.s)
}
func (e *SliceFloat32) TypeName() string { return typeNameSliceFloat32 }
func (s *SliceFloat32) String() string {
	if s.s == nil {
		return ""
	}
	return fmt.Sprintf("%v", *s.s)
}

func (s *SliceFloat32) Usage() string {
	return fmt.Sprintf("xconf/xflag/vars, value split by %s", StringValueDelim)
}
