// Code generated by gotemplate. DO NOT EDIT.

package vars

import (
	"fmt"
	"reflect"
)

//template type Var(KType,ParseKeyFunc)

// ParseKeyFunc 默认解析函数，替换

// KType 默认类型，替换

// Var 类型
type Uint32 uint32

var typeNameUint32 = ""

func init() {
	var ss uint32
	typeNameUint32 = reflect.TypeOf(ss).Name()
}

// NewVar new
func NewUint32(p *uint32) *Uint32 { return (*Uint32)(p) }

// Set for each of the types
func (f *Uint32) Set(s string) error {
	v, err := parseUint32(s)
	if err != nil {
		return err
	}
	*f = Uint32(v)
	return nil
}

// TypeName 类型名称
func (f *Uint32) TypeName() string { return typeNameUint32 }

// Get 返回类型值
func (f *Uint32) Get() interface{} { return uint32(*f) }

// String 获取Set设置的字符串数据？或数据转换到的？
func (f *Uint32) String() string { return fmt.Sprintf("%v", *f) }

// Usage FlagSet使用
func (f *Uint32) Usage() string { return "xconf/xflag/vars" }
