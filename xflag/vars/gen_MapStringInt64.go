// Code generated by gotemplate. DO NOT EDIT.

package vars

import (
	"errors"
	"flag"
	"fmt"
	"reflect"
	"strings"
)

//template type MapKTypeVType(KType,VType,ParseKeyFunc,ParseValFunc,SetProviderByFieldType,StringValueDelim)

// KType 默认key类型

// VType 默认val类型

// StringValueDelim 数据分割符

// SetProviderByFieldType 替换

// ParseKeyFunc key解析，替换

// ParseValFunc val解析，替换

var typeNameMapStringInt64 = ""

func init() {
	v := map[string]int64{}
	typeNameMapStringInt64 = fmt.Sprintf("map[%s]%s", reflect.TypeOf(v).Key().Name(), reflect.TypeOf(v).Elem().Name())
	SetProviderByFieldType(typeNameMapStringInt64, func(valPtr interface{}) flag.Getter {
		return NewMapStringInt64(valPtr)
	})
}

// MapKTypeVType new func
type MapStringInt64 struct {
	s   string
	set bool
	val *map[string]int64
}

// NewMapKTypeVType 创建指定类型
func NewMapStringInt64(valPtr interface{}) *MapStringInt64 {
	return &MapStringInt64{
		val: valPtr.(*map[string]int64),
	}
}

// Get 返回数据，必须返回map[string]interface{}类型
func (e *MapStringInt64) Get() interface{} {
	vv := make(map[string]interface{})
	for k, v := range *e.val {
		vv[fmt.Sprintf("%v", k)] = v
	}
	return vv
}

// Usage  usage info for FlagSet
func (e *MapStringInt64) Usage() string {
	return fmt.Sprintf("xconf/xflag/vars, key and value split by %s", StringValueDelim)
}

// TypeName type name for vars FlagValue provider
func (e *MapStringInt64) TypeName() string { return typeNameMapStringInt64 }

// String 获取Set设置的字符串数据？或数据转换到的？
func (e *MapStringInt64) String() string { return e.s }

// Set 解析时由FlagSet设定而来，进行解析
func (e *MapStringInt64) Set(s string) error {
	e.s = s
	kv := strings.Split(s, StringValueDelim)
	if len(kv)%2 == 1 {
		// 设定了default标签或者空的字符串
		if len(kv) == 1 && kv[0] == "" {
			return nil
		}
		return errors.New("got the odd number of input pairs")
	}
	if !e.set {
		e.set = true
		*e.val = make(map[string]int64)
	}
	var key string
	for i, s := range kv {
		if i%2 == 0 {
			key = s
			continue
		}
		keyVal, err := parseString(key)
		if err != nil {
			return fmt.Errorf("got err:%s while parse:%s raw:%s", err.Error(), key, s)
		}
		val, err := parseInt64(s)
		if err != nil {
			return err
		}
		(*e.val)[keyVal] = val
	}
	return nil
}
