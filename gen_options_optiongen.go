// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package xconf

import (
	"flag"
	"io"
	"log"
	"os"
	"sync/atomic"
	"unsafe"

	"github.com/sandwich-go/xconf/xflag/vars"
	"github.com/sandwich-go/xconf/xutil"
)

// Options should use NewOptions to initialize it
type Options struct {
	Files                            []string               `xconf:"files" usage:"Parse时会由指定的File中加载配置"`
	Readers                          []io.Reader            `xconf:"readers" usage:"Parse时会由指定的Reader中加载配置"`
	FlagSet                          *flag.FlagSet          `xconf:"flag_set" usage:"Parse使用的FlagSet，xconf会自动在flag中创建字段定义,如指定为空则不会创建"`
	FlagValueProvider                vars.FlagValueProvider `xconf:"flag_value_provider" usage:"FlagValueProvider，当xconf无法将字段定义到FlagSet时会回调该方法，提供一些复杂参数配置的Flag与Env支持"`
	FlagArgs                         []string               `xconf:"flag_args" usage:"FlagSet解析使用的Args列表，默认为os.Args[1:]，如指定为空则不会触发FlagSet的定义和解析逻辑"`
	Environ                          []string               `xconf:"environ" usage:"(Parse解析的环境变量，内部将其转换为FlagSet处理，支持的类型参考FlagSet，可以通过xconf.DumpInfo("` // 获取当前支持的FlagSet与Env参数定义)
	DecoderConfigOption              []DecoderConfigOption  `xconf:"decoder_config_option" usage:"xconf内部依赖mapstructure，改方法用户用户层自定义mapstructure解析参数,参考：https://github.com/mitchellh/mapstructure"`
	ErrorHandling                    ErrorHandling          `xconf:"error_handling" usage:"错误处理模式"`
	MapMerge                         bool                   `xconf:"map_merge" usage:"map是否开启merge模式，默认情况下map是作为叶子节点覆盖的，可以通过指定noleaf标签表明key级别覆盖，但是key对应的val依然是整体覆盖，如果指定MapMerge为true，则Map及子元素都会在字段属性级别进行覆盖"`
	FieldTagConvertor                FieldTagConvertor      `xconf:"field_tag_convertor" usage:"字段名转换到map key时优先使用TagName指定的名称，否则使用该函数转换"`
	TagName                          string                 `xconf:"tag_name" usage:"字段TAG名称,默认xconf"`
	TagNameDefaultValue              string                 `xconf:"tag_name_default_value" usage:"默认值TAG名称,默认default"`
	ParseDefault                     bool                   `xconf:"parse_default" usage:"是否解析struct标签中的default数据，解析规则参考xflag支持"`
	FieldPathDeprecated              []string               `xconf:"field_path_deprecated" usage:"弃用的配置，解析时不会报错，但会打印warning日志"`
	ErrEnvBindNotExistWithoutDefault bool                   `xconf:"err_env_bind_not_exist_without_default" usage:"EnvBind时如果Env中不存在指定的key而且没有指定默认值时报错"`
	FieldFlagSetCreateIgnore         []string               `xconf:"field_flag_set_create_ignore" usage:"不自动创建到FlagSet中的名称，路径"`
	Debug                            bool                   `xconf:"debug" usage:"debug模式下输出调试信息"`
	LogDebug                         LogFunc                `xconf:"log_debug" usage:"DEBUG日志"`
	LogWarning                       LogFunc                `xconf:"log_warning" usage:"WARNING日志"`
	AppLabelList                     []string               `xconf:"app_label_list" usage:"应用层Label，用于灰度发布场景"`
}

// ApplyOption apply mutiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *Options) ApplyOption(opts ...Option) []Option {
	var previous []Option
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// Option option func
type Option func(cc *Options) Option

// Parse时会由指定的File中加载配置
// WithFiles option func for Files
func WithFiles(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.Files
		cc.Files = v
		return WithFiles(previous...)
	}
}

// Parse时会由指定的Reader中加载配置
// WithReaders option func for Readers
func WithReaders(v ...io.Reader) Option {
	return func(cc *Options) Option {
		previous := cc.Readers
		cc.Readers = v
		return WithReaders(previous...)
	}
}

// Parse使用的FlagSet，xconf会自动在flag中创建字段定义,如指定为空则不会创建
// WithFlagSet option func for FlagSet
func WithFlagSet(v *flag.FlagSet) Option {
	return func(cc *Options) Option {
		previous := cc.FlagSet
		cc.FlagSet = v
		return WithFlagSet(previous)
	}
}

// FlagValueProvider，当xconf无法将字段定义到FlagSet时会回调该方法，提供一些复杂参数配置的Flag与Env支持
// WithFlagValueProvider option func for FlagValueProvider
func WithFlagValueProvider(v vars.FlagValueProvider) Option {
	return func(cc *Options) Option {
		previous := cc.FlagValueProvider
		cc.FlagValueProvider = v
		return WithFlagValueProvider(previous)
	}
}

// FlagSet解析使用的Args列表，默认为os.Args[1:]，如指定为空则不会触发FlagSet的定义和解析逻辑
// WithFlagArgs option func for FlagArgs
func WithFlagArgs(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.FlagArgs
		cc.FlagArgs = v
		return WithFlagArgs(previous...)
	}
}

// (Parse解析的环境变量，内部将其转换为FlagSet处理，支持的类型参考FlagSet，可以通过xconf.DumpInfo(
// WithEnviron option func for Environ
func WithEnviron(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.Environ
		cc.Environ = v
		return WithEnviron(previous...)
	}
}

// xconf内部依赖mapstructure，改方法用户用户层自定义mapstructure解析参数,参考：https://github.com/mitchellh/mapstructure
// WithDecoderConfigOption option func for DecoderConfigOption
func WithDecoderConfigOption(v ...DecoderConfigOption) Option {
	return func(cc *Options) Option {
		previous := cc.DecoderConfigOption
		cc.DecoderConfigOption = v
		return WithDecoderConfigOption(previous...)
	}
}

// 错误处理模式
// WithErrorHandling option func for ErrorHandling
func WithErrorHandling(v ErrorHandling) Option {
	return func(cc *Options) Option {
		previous := cc.ErrorHandling
		cc.ErrorHandling = v
		return WithErrorHandling(previous)
	}
}

// map是否开启merge模式，默认情况下map是作为叶子节点覆盖的，可以通过指定noleaf标签表明key级别覆盖，但是key对应的val依然是整体覆盖，如果指定MapMerge为true，则Map及子元素都会在字段属性级别进行覆盖
// WithMapMerge option func for MapMerge
func WithMapMerge(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.MapMerge
		cc.MapMerge = v
		return WithMapMerge(previous)
	}
}

// 字段名转换到map key时优先使用TagName指定的名称，否则使用该函数转换
// WithFieldTagConvertor option func for FieldTagConvertor
func WithFieldTagConvertor(v FieldTagConvertor) Option {
	return func(cc *Options) Option {
		previous := cc.FieldTagConvertor
		cc.FieldTagConvertor = v
		return WithFieldTagConvertor(previous)
	}
}

// 字段TAG名称,默认xconf
// WithTagName option func for TagName
func WithTagName(v string) Option {
	return func(cc *Options) Option {
		previous := cc.TagName
		cc.TagName = v
		return WithTagName(previous)
	}
}

// 默认值TAG名称,默认default
// WithTagNameDefaultValue option func for TagNameDefaultValue
func WithTagNameDefaultValue(v string) Option {
	return func(cc *Options) Option {
		previous := cc.TagNameDefaultValue
		cc.TagNameDefaultValue = v
		return WithTagNameDefaultValue(previous)
	}
}

// 是否解析struct标签中的default数据，解析规则参考xflag支持
// WithParseDefault option func for ParseDefault
func WithParseDefault(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.ParseDefault
		cc.ParseDefault = v
		return WithParseDefault(previous)
	}
}

// 弃用的配置，解析时不会报错，但会打印warning日志
// WithFieldPathDeprecated option func for FieldPathDeprecated
func WithFieldPathDeprecated(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.FieldPathDeprecated
		cc.FieldPathDeprecated = v
		return WithFieldPathDeprecated(previous...)
	}
}

// EnvBind时如果Env中不存在指定的key而且没有指定默认值时报错
// WithErrEnvBindNotExistWithoutDefault option func for ErrEnvBindNotExistWithoutDefault
func WithErrEnvBindNotExistWithoutDefault(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.ErrEnvBindNotExistWithoutDefault
		cc.ErrEnvBindNotExistWithoutDefault = v
		return WithErrEnvBindNotExistWithoutDefault(previous)
	}
}

// 不自动创建到FlagSet中的名称，路径
// WithFieldFlagSetCreateIgnore option func for FieldFlagSetCreateIgnore
func WithFieldFlagSetCreateIgnore(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.FieldFlagSetCreateIgnore
		cc.FieldFlagSetCreateIgnore = v
		return WithFieldFlagSetCreateIgnore(previous...)
	}
}

// debug模式下输出调试信息
// WithDebug option func for Debug
func WithDebug(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.Debug
		cc.Debug = v
		return WithDebug(previous)
	}
}

// DEBUG日志
// WithLogDebug option func for LogDebug
func WithLogDebug(v LogFunc) Option {
	return func(cc *Options) Option {
		previous := cc.LogDebug
		cc.LogDebug = v
		return WithLogDebug(previous)
	}
}

// WARNING日志
// WithLogWarning option func for LogWarning
func WithLogWarning(v LogFunc) Option {
	return func(cc *Options) Option {
		previous := cc.LogWarning
		cc.LogWarning = v
		return WithLogWarning(previous)
	}
}

// 应用层Label，用于灰度发布场景
// WithAppLabelList option func for AppLabelList
func WithAppLabelList(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.AppLabelList
		cc.AppLabelList = v
		return WithAppLabelList(previous...)
	}
}

// NewOptions new Options
func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

// InstallOptionsWatchDog the installed func will called when NewOptions  called
func InstallOptionsWatchDog(dog func(cc *Options)) { watchDogOptions = dog }

// watchDogOptions global watch dog
var watchDogOptions func(cc *Options)

// newDefaultOptions new default Options
func newDefaultOptions() *Options {
	cc := &Options{}

	for _, opt := range [...]Option{
		WithFiles([]string{}...),
		WithReaders([]io.Reader{}...),
		WithFlagSet(flag.CommandLine),
		WithFlagValueProvider(nil),
		WithFlagArgs(os.Args[1:]...),
		WithEnviron(os.Environ()...),
		WithDecoderConfigOption(nil...),
		WithErrorHandling(PanicOnError),
		WithMapMerge(false),
		WithFieldTagConvertor(xutil.SnakeCase),
		WithTagName(DefaultTagName),
		WithTagNameDefaultValue(DefaultValueTagName),
		WithParseDefault(true),
		WithFieldPathDeprecated(make([]string, 0)...),
		WithErrEnvBindNotExistWithoutDefault(true),
		WithFieldFlagSetCreateIgnore(make([]string, 0)...),
		WithDebug(false),
		WithLogDebug(func(s string) { log.Println("[  DEBUG] " + s) }),
		WithLogWarning(func(s string) { log.Println("[WARNING] " + s) }),
		WithAppLabelList([]string{}...),
	} {
		opt(cc)
	}

	return cc
}

// AtomicSetFunc used for XConf
func (cc *Options) AtomicSetFunc() func(interface{}) { return AtomicOptionsSet }

// atomicOptions global *Options holder
var atomicOptions unsafe.Pointer

// onAtomicOptionsSet global call back when  AtomicOptionsSet called by XConf.
// use OptionsInterface.ApplyOption to modify the updated cc
// if passed in cc not valid, then return false, cc will not set to atomicOptions
var onAtomicOptionsSet func(cc OptionsInterface) bool

// InstallCallbackOnAtomicOptionsSet install callback
func InstallCallbackOnAtomicOptionsSet(callback func(cc OptionsInterface) bool) {
	onAtomicOptionsSet = callback
}

// AtomicOptionsSet atomic setter for *Options
func AtomicOptionsSet(update interface{}) {
	cc := update.(*Options)
	if onAtomicOptionsSet != nil && !onAtomicOptionsSet(cc) {
		return
	}
	atomic.StorePointer(&atomicOptions, (unsafe.Pointer)(cc))
}

// AtomicOptions return atomic *OptionsVisitor
func AtomicOptions() OptionsVisitor {
	current := (*Options)(atomic.LoadPointer(&atomicOptions))
	if current == nil {
		defaultOne := newDefaultOptions()
		if watchDogOptions != nil {
			watchDogOptions(defaultOne)
		}
		atomic.CompareAndSwapPointer(&atomicOptions, nil, (unsafe.Pointer)(defaultOne))
		return (*Options)(atomic.LoadPointer(&atomicOptions))
	}
	return current
}

// all getter func
func (cc *Options) GetFiles() []string                            { return cc.Files }
func (cc *Options) GetReaders() []io.Reader                       { return cc.Readers }
func (cc *Options) GetFlagSet() *flag.FlagSet                     { return cc.FlagSet }
func (cc *Options) GetFlagValueProvider() vars.FlagValueProvider  { return cc.FlagValueProvider }
func (cc *Options) GetFlagArgs() []string                         { return cc.FlagArgs }
func (cc *Options) GetEnviron() []string                          { return cc.Environ }
func (cc *Options) GetDecoderConfigOption() []DecoderConfigOption { return cc.DecoderConfigOption }
func (cc *Options) GetErrorHandling() ErrorHandling               { return cc.ErrorHandling }
func (cc *Options) GetMapMerge() bool                             { return cc.MapMerge }
func (cc *Options) GetFieldTagConvertor() FieldTagConvertor       { return cc.FieldTagConvertor }
func (cc *Options) GetTagName() string                            { return cc.TagName }
func (cc *Options) GetTagNameDefaultValue() string                { return cc.TagNameDefaultValue }
func (cc *Options) GetParseDefault() bool                         { return cc.ParseDefault }
func (cc *Options) GetFieldPathDeprecated() []string              { return cc.FieldPathDeprecated }
func (cc *Options) GetErrEnvBindNotExistWithoutDefault() bool {
	return cc.ErrEnvBindNotExistWithoutDefault
}
func (cc *Options) GetFieldFlagSetCreateIgnore() []string { return cc.FieldFlagSetCreateIgnore }
func (cc *Options) GetDebug() bool                        { return cc.Debug }
func (cc *Options) GetLogDebug() LogFunc                  { return cc.LogDebug }
func (cc *Options) GetLogWarning() LogFunc                { return cc.LogWarning }
func (cc *Options) GetAppLabelList() []string             { return cc.AppLabelList }

// OptionsVisitor visitor interface for Options
type OptionsVisitor interface {
	GetFiles() []string
	GetReaders() []io.Reader
	GetFlagSet() *flag.FlagSet
	GetFlagValueProvider() vars.FlagValueProvider
	GetFlagArgs() []string
	GetEnviron() []string
	GetDecoderConfigOption() []DecoderConfigOption
	GetErrorHandling() ErrorHandling
	GetMapMerge() bool
	GetFieldTagConvertor() FieldTagConvertor
	GetTagName() string
	GetTagNameDefaultValue() string
	GetParseDefault() bool
	GetFieldPathDeprecated() []string
	GetErrEnvBindNotExistWithoutDefault() bool
	GetFieldFlagSetCreateIgnore() []string
	GetDebug() bool
	GetLogDebug() LogFunc
	GetLogWarning() LogFunc
	GetAppLabelList() []string
}

// OptionsInterface visitor + ApplyOption interface for Options
type OptionsInterface interface {
	OptionsVisitor
	ApplyOption(...Option) []Option
}
