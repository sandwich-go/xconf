// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package xconf

import (
	"flag"
	"io"
	"log"
	"os"

	"github.com/sandwich-go/xconf/xflag/vars"
)

type Options struct {
	Files                            []string
	Readers                          []io.Reader
	FlagSet                          *flag.FlagSet
	FlagValueProvider                vars.FlagValueProvider
	FlagArgs                         []string
	Environ                          []string // 获取当前支持的FlagSet与Env参数定义)
	DecoderConfigOption              []DecoderConfigOption
	ErrorHandling                    ErrorHandling
	MapMerge                         bool
	FieldTagConvertor                FieldTagConvertor
	TagName                          string
	TagNameDefaultValue              string
	ParseDefault                     bool
	FieldPathDeprecated              []string
	ErrEnvBindNotExistWithoutDefault bool
	FieldFlagSetCreateIgnore         []string
	Debug                            bool
	LogDebug                         LogFunc
	LogWarning                       LogFunc
	AppLabelList                     []string
}

func (cc *Options) SetOption(opt Option) {
	_ = opt(cc)
}

func (cc *Options) ApplyOption(opts ...Option) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

func (cc *Options) GetSetOption(opt Option) Option {
	return opt(cc)
}

type Option func(cc *Options) Option

// Parse时会由指定的File中加载配置
func WithFiles(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.Files
		cc.Files = v
		return WithFiles(previous...)
	}
}

// Parse时会由指定的Reader中加载配置
func WithReaders(v ...io.Reader) Option {
	return func(cc *Options) Option {
		previous := cc.Readers
		cc.Readers = v
		return WithReaders(previous...)
	}
}

// Parse使用的FlagSet，xconf会自动在flag中创建字段定义,如指定为空则不会创建
func WithFlagSet(v *flag.FlagSet) Option {
	return func(cc *Options) Option {
		previous := cc.FlagSet
		cc.FlagSet = v
		return WithFlagSet(previous)
	}
}

// FlagValueProvider，当xconf无法将字段定义到FlagSet时会回调该方法，提供一些复杂参数配置的Flag与Env支持
func WithFlagValueProvider(v vars.FlagValueProvider) Option {
	return func(cc *Options) Option {
		previous := cc.FlagValueProvider
		cc.FlagValueProvider = v
		return WithFlagValueProvider(previous)
	}
}

// FlagSet解析使用的Args列表，默认为os.Args[1:]，如指定为空则不会触发FlagSet的定义和解析逻辑
func WithFlagArgs(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.FlagArgs
		cc.FlagArgs = v
		return WithFlagArgs(previous...)
	}
}

// (Parse解析的环境变量，内部将其转换为FlagSet处理，支持的类型参考FlagSet，可以通过xconf.DumpInfo(
func WithEnviron(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.Environ
		cc.Environ = v
		return WithEnviron(previous...)
	}
}

// xconf内部依赖mapstructure，改方法用户用户层自定义mapstructure解析参数,参考：https://github.com/mitchellh/mapstructure
func WithDecoderConfigOption(v ...DecoderConfigOption) Option {
	return func(cc *Options) Option {
		previous := cc.DecoderConfigOption
		cc.DecoderConfigOption = v
		return WithDecoderConfigOption(previous...)
	}
}

// 错误处理模式
func WithErrorHandling(v ErrorHandling) Option {
	return func(cc *Options) Option {
		previous := cc.ErrorHandling
		cc.ErrorHandling = v
		return WithErrorHandling(previous)
	}
}

// map是否开启merge模式，默认情况下map是作为叶子节点覆盖的，可以通过指定noleaf标签表明key级别覆盖，但是key对应的val依然是整体覆盖，如果指定MapMerge为true，则Map及子元素都会在字段属性级别进行覆盖
func WithMapMerge(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.MapMerge
		cc.MapMerge = v
		return WithMapMerge(previous)
	}
}

// 字段名转换到map key时优先使用TagName指定的名称，否则使用该函数转换
func WithFieldTagConvertor(v FieldTagConvertor) Option {
	return func(cc *Options) Option {
		previous := cc.FieldTagConvertor
		cc.FieldTagConvertor = v
		return WithFieldTagConvertor(previous)
	}
}

// 字段TAG名称,默认xconf
func WithTagName(v string) Option {
	return func(cc *Options) Option {
		previous := cc.TagName
		cc.TagName = v
		return WithTagName(previous)
	}
}

// 默认值TAG名称,默认default
func WithTagNameDefaultValue(v string) Option {
	return func(cc *Options) Option {
		previous := cc.TagNameDefaultValue
		cc.TagNameDefaultValue = v
		return WithTagNameDefaultValue(previous)
	}
}

// 是否解析struct标签中的default数据，解析规则参考xflag支持
func WithParseDefault(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.ParseDefault
		cc.ParseDefault = v
		return WithParseDefault(previous)
	}
}

// 弃用的配置，解析时不会报错，但会打印warning日志
func WithFieldPathDeprecated(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.FieldPathDeprecated
		cc.FieldPathDeprecated = v
		return WithFieldPathDeprecated(previous...)
	}
}

// EnvBind时如果Env中不存在指定的key而且没有指定默认值时报错
func WithErrEnvBindNotExistWithoutDefault(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.ErrEnvBindNotExistWithoutDefault
		cc.ErrEnvBindNotExistWithoutDefault = v
		return WithErrEnvBindNotExistWithoutDefault(previous)
	}
}

// 不自动创建到FlagSet中的名称，路径
func WithFieldFlagSetCreateIgnore(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.FieldFlagSetCreateIgnore
		cc.FieldFlagSetCreateIgnore = v
		return WithFieldFlagSetCreateIgnore(previous...)
	}
}

// debug模式下输出调试信息
func WithDebug(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.Debug
		cc.Debug = v
		return WithDebug(previous)
	}
}

// DEBUG日志
func WithLogDebug(v LogFunc) Option {
	return func(cc *Options) Option {
		previous := cc.LogDebug
		cc.LogDebug = v
		return WithLogDebug(previous)
	}
}

// WARNING日志
func WithLogWarning(v LogFunc) Option {
	return func(cc *Options) Option {
		previous := cc.LogWarning
		cc.LogWarning = v
		return WithLogWarning(previous)
	}
}

// 应用层Label，用于灰度发布场景
func WithAppLabelList(v ...string) Option {
	return func(cc *Options) Option {
		previous := cc.AppLabelList
		cc.AppLabelList = v
		return WithAppLabelList(previous...)
	}
}

func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()

	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

func InstallOptionsWatchDog(dog func(cc *Options)) {
	watchDogOptions = dog
}

var watchDogOptions func(cc *Options)

func newDefaultOptions() *Options {

	cc := &Options{}

	for _, opt := range [...]Option{
		WithFiles([]string{}...),
		WithReaders([]io.Reader{}...),
		WithFlagSet(flag.CommandLine),
		WithFlagValueProvider(nil),
		WithFlagArgs(os.Args[1:]...),
		WithEnviron(os.Environ()...),
		WithDecoderConfigOption(nil...),
		WithErrorHandling(PanicOnError),
		WithMapMerge(false),
		WithFieldTagConvertor(SnakeCase),
		WithTagName(DefaultTagName),
		WithTagNameDefaultValue(DefaultValueTagName),
		WithParseDefault(true),
		WithFieldPathDeprecated(make([]string, 0)...),
		WithErrEnvBindNotExistWithoutDefault(true),
		WithFieldFlagSetCreateIgnore(make([]string, 0)...),
		WithDebug(false),
		WithLogDebug(func(s string) { log.Println("[  DEBUG] " + s) }),
		WithLogWarning(func(s string) { log.Println("[WARNING] " + s) }),
		WithAppLabelList([]string{}...),
	} {
		_ = opt(cc)
	}

	return cc
}
